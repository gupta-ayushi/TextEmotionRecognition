# -*- coding: utf-8 -*-
"""TextEmotionRecognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_CVxKJDbCSgmdaOSdcpNTQg3nFE7gqEn
"""

import pandas as pd
import numpy as np
import seaborn as ssn

# Loading the dataset
df = pd.read_csv('/content/drive/MyDrive/emotiondataset.csv')

df.head()

df['Emotion'].value_counts()

ssn.countplot(df['Emotion'])

# data preprocessing
!pip install neattext

import neattext.functions as nfx

# remove user handles
df['clean_text'] = df['Text'].apply(nfx.remove_userhandles)

dir(nfx)

df['clean_text'] = df['clean_text'].apply(nfx.remove_stopwords)

df

# splitting data into input variables and target variable
x = df['clean_text']
y = df['Emotion']

# splitting data into train and test set
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

# training the model
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression

# logistic regression
pipe_lr = Pipeline(steps=[('cv', CountVectorizer()), ('lr', LogisticRegression())])
pipe_lr.fit(x_train, y_train)
pipe_lr.score(x_test, y_test)

# svm
pipe_svm = Pipeline(steps=[('cv', CountVectorizer()), ('svm', SVC(kernel='rbf', C=10))])
pipe_svm.fit(x_train, y_train)
pipe_svm.score(x_test, y_test)

# Random forest classifier
pipe_rf = Pipeline(steps=[('cv', CountVectorizer()), ('rf', RandomForestClassifier(n_estimators=10))])
pipe_rf.fit(x_train, y_train)
pipe_rf.score(x_test, y_test)

# saving the model
import joblib
pipeline_file = open('text_emotion.pkl', 'wb')
joblib.dump(pipe_svm, pipeline_file)
pipeline_file.close()